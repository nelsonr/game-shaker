{"version":3,"sources":["Genres.js","App.js","serviceWorker.js","index.js"],"names":["GameGenres","getRandomGenre","randomIndex","Math","floor","random","length","genreShaker","game1","game2","game3","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","randomGenre","setState","_this2","react_default","a","createElement","className","onClick","_","randomize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAMA,EAAa,CACf,SACA,sBACA,mBACA,YACA,oBACA,MACA,YACA,gBACA,cACA,eACA,sBACA,gBACA,mBACA,2BACA,yCACA,aACA,gBACA,kBACA,eACA,WACA,uBACA,SACA,MACA,wBACA,yBACA,iBACA,gBACA,cACA,mBACA,cACA,kBACA,oBACA,+BACA,eACA,MACA,kCACA,QACA,WACA,aACA,UACA,aACA,QACA,WACA,cACA,SACA,SACA,qBACA,oBACA,SACA,YACA,eACA,eACA,UACA,aACA,aACA,oBACA,0BACA,SACA,UACA,WACA,WACA,kBACA,wBACA,mBACA,uBACA,kBACA,gBACA,sBACA,qBACA,qBACA,mBACA,uBACA,eACA,WAGG,SAASC,IACZ,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,UAAYL,EAAWM,OAAS,IAEpE,OAAON,EAAWE,GAGf,SAASK,IACZ,IAAMC,EAAQP,IACRQ,EAAQR,IACRS,EAAQT,IAEd,SAAAU,OAAUH,EAAV,KAAAG,OAAmBF,EAAnB,KAAAE,OAA4BD,EAA5B,eAGWV,ICxDAY,cA9BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,YAAaf,KAJFO,2EASfG,KAAKM,SAAS,CACVD,YAAaf,uCAIZ,IAAAiB,EAAAP,KACL,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASX,KAAKI,MAAMC,aACnCG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,SAAAC,GAAC,OAAIN,EAAKO,cAA3B,sBAvBNC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc9b9dc9.chunk.js","sourcesContent":["const GameGenres = [\n    \"Action\",\n    \"Action role-playing\",\n    \"Action-adventure\",\n    \"Adventure\",\n    \"Alternate reality\",\n    \"Art\",\n    \"Artillery\",\n    \"Battle royale\",\n    \"Beat 'em up\",\n    \"Bish≈çjo\",\n    \"Business simulation\",\n    \"City-building\",\n    \"Collectible card\",\n    \"Combat flight simulation\",\n    \"Construction and management simulation\",\n    \"Dating sim\",\n    \"Dungeon crawl\",\n    \"Escape the room\",\n    \"Falling-sand\",\n    \"Fighting\",\n    \"First-person shooter\",\n    \"Girls'\",\n    \"God\",\n    \"Government simulation\",\n    \"Grand Theft Auto clone\",\n    \"Hack and slash\",\n    \"Immersive sim\",\n    \"Incremental\",\n    \"Interactive film\",\n    \"Kart racing\",\n    \"Life simulation\",\n    \"Light gun shooter\",\n    \"Massively multiplayer online\",\n    \"Metroidvania\",\n    \"MUD\",\n    \"Multiplayer online battle arena\",\n    \"Music\",\n    \"Non-game\",\n    \"Nonviolent\",\n    \"Olympic\",\n    \"Open world\",\n    \"Otome\",\n    \"Platform\",\n    \"Programming\",\n    \"Puzzle\",\n    \"Racing\",\n    \"Real-time strategy\",\n    \"Real-time tactics\",\n    \"Rhythm\",\n    \"Roguelike\",\n    \"Role-playing\",\n    \"Shoot 'em up\",\n    \"Shooter\",\n    \"Sim racing\",\n    \"Simulation\",\n    \"Social simulation\",\n    \"Space flight simulation\",\n    \"Sports\",\n    \"Stealth\",\n    \"Strategy\",\n    \"Survival\",\n    \"Survival horror\",\n    \"Tactical role-playing\",\n    \"Tactical shooter\",\n    \"Third-person shooter\",\n    \"Time management\",\n    \"Tower defense\",\n    \"Turn-based strategy\",\n    \"Turn-based tactics\",\n    \"Vehicle simulation\",\n    \"Vehicular combat\",\n    \"Vertically scrolling\",\n    \"Visual novel\",\n    \"Wargame\"\n];\n\nexport function getRandomGenre() {\n    const randomIndex = Math.floor(Math.random() * (GameGenres.length - 1));\n\n    return GameGenres[randomIndex];\n}\n\nexport function genreShaker() {\n    const game1 = getRandomGenre();\n    const game2 = getRandomGenre();\n    const game3 = getRandomGenre();\n\n    return `${game1} ${game2} ${game3} game`;\n}\n\nexport default GameGenres;\n","import React from \"react\";\nimport { genreShaker } from \"./Genres\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            randomGenre: genreShaker()\n        };\n    }\n\n    randomize() {\n        this.setState({\n            randomGenre: genreShaker()\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Video Game Shaker</h1>\n\n                <main>\n                    <div className=\"genre\">{this.state.randomGenre}</div>\n                    <div className=\"randomize\">\n                        <button onClick={_ => this.randomize()}>Generate</button>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}